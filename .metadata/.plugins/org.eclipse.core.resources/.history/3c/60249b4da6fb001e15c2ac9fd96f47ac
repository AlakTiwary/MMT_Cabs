package PageFactory;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.time.Duration;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class CabPF{
	static WebDriver driver;
	
	public CabPF(WebDriver driver) 
	{   
		this.driver=driver;
		PageFactory.initElements(driver,this);
	
	}
	
	 public void ExplicitWait(WebElement webElement,int time){
		 WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(time));
			wait.until(ExpectedConditions.elementToBeClickable(webElement));
	 }
	 //Actions act=new Actions(driver);
	 @FindBy(xpath="//ul[@class=\"makeFlex font12 headerIconsGap\"]/child::li[7]/child::span/child::a")
	 WebElement homepageCab;
   
	@FindBy(xpath="//ul[@class=\"latoBlack greyText b2c_cswTabs\"]/child::li[1]")
	WebElement oneWay;
	
	@FindBy(xpath="//span[contains(text(),'From')]")
	WebElement source;
	
	@FindBy(xpath="//div[@class=\"csw outstationOneway\"]/child::div[1]/child::div/child::label/child::input[@id=\"to\"]")
	WebElement destination;
	
	@FindBy(xpath="//a[@data-cy=\"OutstationOneWayWidget_64\"]")
	WebElement searchOneWay;
	
	@FindBy(xpath="//input[contains(@placeholder,'From')]")
	WebElement sourceInput;
	
	@FindBy(xpath="//div[@role=\"combobox\"]/child::input")
	WebElement destInput;
	
	@FindBy(xpath="//div[contains(@role,'listbox')]")
	WebElement destList;
	
	@FindBy(xpath="//li[@role=\"option\"][1]")
	WebElement destReq;
	
    @FindBy(xpath="//label[contains(@for,'departure')]")
    WebElement dateDeparture;
    
    @FindBy(xpath="//div[@data-cy=\"OutstationRoundTripWidget_73\"]/label")
    WebElement dateDepartureR;
	
	@FindBy(xpath="//div[@class=\"DayPicker-Months\"]/child::div[1]/child::div[1]/child::div")
	WebElement monthAndYear;
	
	@FindBy(xpath="//div[@class=\"DayPicker-Months\"]/child::div[1]/child::div[1]/child::div[1]")
	WebElement monthAndYearR;
	
	@FindBy(xpath="//div[@class=\"DayPicker-Day\"]")
	List<WebElement> datePath;
	
	@FindBy(xpath="//div[@class=\"DayPicker-Day\"]")
	List<WebElement> datePathR;
	
	@FindBy(xpath="//div[@class=\"DayPicker-wrapper\"]/child::div/child::span[2]")
	WebElement nextButton;
	
	@FindBy(xpath="//li[@data-cy=\"HrSlots_81\"]")
	List<WebElement> hrTime;
	
	@FindBy(xpath="//ul[@class=\"newTimeSlotMinUl\"]/li")
	List<WebElement> minTime;
	
	@FindBy(xpath="//ul[@class=\"newTimeSlotMerUl\"]/li")
	List<WebElement> merTime;
	
	@FindBy(xpath="//span[@class=\"applyBtnText\"]")
	WebElement applyBtn;
	
	@FindBy(xpath="//ul[@class=\"newTimeSlotHrUl\"]")
	WebElement hrList;
	
	@FindBy(xpath="//ul[@class=\"newTimeSlotMinUl\"]")
    WebElement minList;
	
	@FindBy(xpath="//li[contains(@data-cy,'outstationRoundTrip')]")
	WebElement roundTrip;
	
    @FindBy(xpath="//li[@data-cy=\"airportTransfer\"]")
    WebElement airportTransfer;
    
    @FindBy(xpath="//label[contains(@for,'pickupType')]")
    WebElement pickType;
    
    @FindBy(xpath="//ul[@class=\"pickupTypePopup blackText\"]/child::li[1]")
    WebElement fromAirport;
    
    @FindBy(xpath="//input[@placeholder=\"AIRPORT\"]")
    WebElement fromPortInput;
    
    @FindBy(xpath="//ul[@role=\"listbox\"]/child::li[1]")
    WebElement dropdown;
    
    @FindBy(xpath="//div[@data-cy=\"AirportTransferWidget_30\"]")
    WebElement toClick;
    
    @FindBy(xpath="//input[contains(@placeholder,'To')]")
    WebElement portToLocation;
    
    @FindBy(xpath="//div[@data-cy=\"AirportTransferWidget_32\"]")
    WebElement timeClick;
    
    @FindBy(xpath="//div[@id=\"List\"]/child::div[1]/child::div/child::div[3]/child::div/child::a/child::span")
    WebElement cab_book;
    
    @FindBy(xpath="//li[@data-cy=\"hourlyRental\"]")
    WebElement hourlyRental;
    
    @FindBy(xpath="//span[@aria-label=\"Previous Month\"]")
	WebElement prevDateBtn;
	
	@FindBy(xpath="//span[@aria-label=\"Next Month\"]")
	WebElement nxtDateBtn;
	
	@FindBy(xpath="//span[@aria-label=\"Next Month\"]")
	WebElement nxtDateBtnR;	
	
	@FindBy(xpath="//div[@data-cy=\"HourlyCabRentalWidget_44\"]")
	WebElement rentalFromElement;
	
	@FindBy(xpath="//label[@for=\"fromCity\"]/child::input")
	WebElement rentalLocInput;
	
	@FindBy(xpath="//div[@data-cy=\"HourlyCabRentalWidget_47\"]")
	WebElement packageClick;
	
	@FindBy(xpath="//li[@data-cy=\"Duration_43\"]")
	List<WebElement> packages;
	
	@FindBy(xpath="//a[@data-cy=\"HourlyCabRentalWidget_49\"]")
	WebElement rentalSearch;
	
	@FindBy(xpath="//span[@class=\\\"font16 tundoraBlackColor latoRegular\\\"]")
	WebElement landingPage;
  
    
    
  
	public void clickCab() {
		homepageCab.click();
	}
	
	public void clickOneWay() {
		oneWay.click();
	}
    public void enterSource(String s) throws InterruptedException, AWTException  {
    	
    	ExplicitWait(source,2);
    	source.click();
    	ExplicitWait(sourceInput,2);
    	sourceInput.sendKeys(s);
        Robot r=new Robot();
        r.keyPress(KeyEvent.VK_DOWN);
        r.keyRelease(KeyEvent.VK_DOWN);
        r.keyPress(KeyEvent.VK_ENTER);	       
        r.keyRelease(KeyEvent.VK_ENTER);
    }
    public void enterDest(String dest) throws AWTException, InterruptedException  
        {
    	ExplicitWait(destInput,2);
    	destInput.sendKeys(dest);
    	ExplicitWait(destList,2);
    	ExplicitWait(destReq,2);
    	Robot r=new Robot();
    	r.keyPress(KeyEvent.VK_DOWN);
        r.keyRelease(KeyEvent.VK_DOWN);
        r.keyPress(KeyEvent.VK_ENTER);	       
        r.keyRelease(KeyEvent.VK_ENTER);
   
         }
    public void enterDate(String dep_date) throws InterruptedException  {
    	ExplicitWait(dateDeparture,2);
    
    	JavascriptExecutor js=(JavascriptExecutor) driver;
    	js.executeScript("window.scrollBy(0,150)");
    	String[] date=dep_date.split(",");
    	String day=date[0];
    	String monthYear=date[1];
    	Boolean flag=true;
    	while(flag==true) 
    	{
    	   if(monthYear.equalsIgnoreCase(monthAndYear.getText()))
    	    {
    		    break;
    	    }
    	   else {
    		   ExplicitWait(nextButton,4);
    		   nextButton.click();
    	   }
    	   
    	}
    	//List<WebElement> days=datePath;
    	for(WebElement d:datePath)
    	{
    		String dayOfDate=d.getText();
    		if(dayOfDate.equals(day)) 
    		{
    			d.click();
    			break;
    		}
    	}
    	
    }
    
	
    public void enterDateRound(String dep_date) throws InterruptedException  {
    	//ExplicitWait(dateDepartureR,2);
    
    	JavascriptExecutor js=(JavascriptExecutor) driver;
    	js.executeScript("window.scrollBy(0,150)");
    	String[] date=dep_date.split(",");
    	String day=date[0];
    	String monthYear=date[1];
    	Boolean flag=true;
    	while(flag==true) 
    	{  
    	   if(monthYear.equalsIgnoreCase(monthAndYearR.getText()))
    	    {  flag=false;
    		    break;
    		    
    	    }
    	   else {
    		   ExplicitWait(nxtDateBtn,6);
    		   nxtDateBtn.click();
    	   }
    	   
    	}
    	//List<WebElement> days=datePath;
    	for(WebElement d:datePathR)
    	{   ExplicitWait(d,3);
    		String dayOfDate=d.getText();
    		if(dayOfDate.equals(day)) 
    		{
    			d.click();
    			break;
    		}
    	}
    	
    }
    
    
    
    public void enterTime(String timee) {
    	String[] tim=timee.split(":");
    	String hr=tim[0];
    	String min=tim[1];
    	String meredian=tim[2];
    	
    	for (WebElement  hour: hrTime) 
    	{

            //  Selecting the hour based on text
    		ExplicitWait(hrList,4);
            if (hour.getText().equals(hr)) {
            	ExplicitWait(hour,2);
                hour.click();
                break; 
            }
        }
    	ExplicitWait(minList,3);
    	for(WebElement minute:minTime) {
    		//((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();",minute);
    		
    		if(minute.getText().equals(min)){
    			minute.click();
    			break;
    		}
    	}
    	for(WebElement mer:merTime) {
    		//((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView();", mer);
    		if(mer.getText().equals(meredian)) {
    			mer.click();
    			break;
    		}
    	}
    	applyBtn.click();
    	
    }
    public void SearchOneWay() {
    	ExplicitWait(searchOneWay,5);
		searchOneWay.click();
	}
    
    public void landingPage() {
    	
    }
    public void clickRoundTrip()
    {
    	ExplicitWait(roundTrip,2);
        roundTrip.click();	
    }
    public void clickAirportTransfer() {
    	ExplicitWait(airportTransfer,2);
    	airportTransfer.click();
    }
    public void clickPickType(String s) {
    	pickType.click();
    	ExplicitWait(fromAirport,2);
    	fromAirport.click();	
    }
    public void fromPort(String s) throws AWTException {
    	ExplicitWait(fromPortInput,2);
    	fromPortInput.sendKeys(s);
    	ExplicitWait(dropdown,2);
        dropdown.click();
    	Robot r=new Robot();
    	r.mouseMove(350, 350);
        r.mousePress(InputEvent.BUTTON1_DOWN_MASK);
        r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);

    	
    }
    public void toLocation(String s) throws AWTException, InterruptedException {
        
        toClick.click();
    	portToLocation.sendKeys(s);
    	ExplicitWait(dropdown,3);
    	dropdown.click();
    	Robot r=new Robot();
    	r.mouseMove(420, 520);
        r.mousePress(InputEvent.BUTTON1_DOWN_MASK);
        r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);
    }
    public void enterrTime(String s) {
    	ExplicitWait(timeClick,2);
    	timeClick.click();
    	applyBtn.click();
    	
    }
    
    public void bookCab() throws AWTException {
    	JavascriptExecutor js=(JavascriptExecutor) driver;
    	js.executeScript("window.scrollBy(0,150)");
    	ExplicitWait(cab_book,10);
    	cab_book.click();  	
    }
    public void bookRental() {
    	ExplicitWait(hourlyRental,6);
    	hourlyRental.click();
    }
    
    public void rentFromLoc(String s) {
    	ExplicitWait(rentalFromElement,4);
    	rentalFromElement.click();
    	ExplicitWait(rentalLocInput,3);
    	rentalLocInput.sendKeys(s);
    	
    }

    
	
}